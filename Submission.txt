## Set up the Jenkins server in master or slave architecture

To achieve this we will be using Terraform to provision the infrastructure, I will give details below.
Prerequiste
1. Open an AWS account/any cloud account of your choice. (working with AWS).
2. Create your AWS access key and secret keys.
3. Install Terraform on your local machine
4. If using remote backend for Terraform, set up your account also.
5. Set up aws cli on your local machine.

## 

After coding up your terraform code for your infrastructure
To get it to provision, run these commands
(See Sample  Code in folder Terraform)
terraform init
terraform plan(not compulsory but advisable so you can see what your code will do).
terraform apply.

## 

Go to AWS Console  to verify that your ec2 instances are running.

Next set up your ec2 using Ansible as the  configuration management tool.
write up your playbook for installation of jdk, maven and Jenkins.
(see sample code in Folder Ansible).

##

Install ansible on your local machine.
Edit Ansible hosts or create an inventory file
sudo vi /etc/ansible/hosts
set up connection from your local machine to the target host (Master and Slave nodes).
Use your playbooks to install all the necessary software for your jenkins instance.

##

For this project we will be using eksctl to provision K8s clusters
 use this command below 
 eksctl create cluster --name hangout-eks --region us-east-2 --nodegroup-name my-nodes --node-type t3.small --managed --nodes 2 

The eksctl tool uses CloudFormation under the hood, creating one stack for the EKS master control plane and another stack for the worker nodes.

Click on Add Credentials, use Kubernetes configuration from drop down.

execute the below command to get kubeconfig info, copy the entire content of the file:
sudo cat ~/.kube/config

Enter ID as K8S and choose enter directly and paste the above file content and save.

By default, clusterrolebinding has system:anonymous set which blocks the cluster access. Execute the following command to set a clusterrole as cluster-admin which will give you the required access.

kubectl create clusterrolebinding cluster-system-anonymous --clusterrole=cluster-admin --user=system:anonymous
